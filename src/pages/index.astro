---
// Disable prerendering to ensure fresh data on every request
export const prerender = false;

import BaseHead from '../components/BaseHead.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';

// Get Discord credentials
const DISCORD_BOT_TOKEN = Astro.locals.runtime?.env?.DISCORD_BOT_TOKEN || import.meta.env.DISCORD_BOT_TOKEN;
const DISCORD_GUILD_ID = Astro.locals.runtime?.env?.DISCORD_GUILD_ID || import.meta.env.DISCORD_GUILD_ID;
const DISCORD_CHANNEL_ID = Astro.locals.runtime?.env?.DISCORD_CHANNEL_ID || import.meta.env.DISCORD_CHANNEL_ID;

// Fetch Discord guild and channel data (for displaying server info)
let serverName = 'Unknown Community';
let serverIcon: string = 'S';
let isIconUrl = false;
let onlineCount = 0;
let memberCount = 0;
let bannerUrl: string | null = null;
let splashUrl: string | null = null;
let serverDescription: string | null = null;
let channelName: string | null = null;
let badgeColorPrimary: string | null = null;
let badgeColorSecondary: string | null = null;
let tagName: string | null = null;
let tagEmoji: string | null = null;
let badgeUrl: string | null = null;
let guildId: string | null = null;
let unknownCommunity = true;

try {
	if (!DISCORD_BOT_TOKEN || !DISCORD_GUILD_ID) {
		console.warn('Missing Discord bot credentials', {
			hasToken: !!DISCORD_BOT_TOKEN,
			hasGuildId: !!DISCORD_GUILD_ID,
			tokenLength: DISCORD_BOT_TOKEN?.length,
			guildId: DISCORD_GUILD_ID
		});
	} else {
		console.log('Fetching guild data...', {
			guildId: DISCORD_GUILD_ID,
			tokenPrefix: DISCORD_BOT_TOKEN.substring(0, 20) + '...'
		});

		// Fetch guild data
		const guildResponse = await fetch(
			`https://discord.com/api/v10/guilds/${DISCORD_GUILD_ID}?with_counts=true`,
			{
				headers: {
					'Authorization': `Bot ${DISCORD_BOT_TOKEN}`,
					'User-Agent': 'DiscordBot (https://strands.gg, 1.0)'
				}
			}
		);

		console.log('Guild response status:', guildResponse.status);

		if (!guildResponse.ok) {
			const errorText = await guildResponse.text();
			console.error(`Failed to fetch guild data (${guildResponse.status}):`, errorText);
		} else {
			const guildData = await guildResponse.json() as any;
			unknownCommunity = false;

			guildId = guildData.id;
			serverName = guildData.name || serverName;
			serverDescription = guildData.description || null;
			onlineCount = guildData.approximate_presence_count || 0;
			memberCount = guildData.approximate_member_count || 0;

			// Get server icon
			if (guildData.icon) {
				serverIcon = `https://cdn.discordapp.com/icons/${guildData.id}/${guildData.icon}.png?size=128`;
				isIconUrl = true;
			} else {
				serverIcon = serverName.charAt(0).toUpperCase();
			}

			// Get banner if available
			if (guildData.banner) {
				bannerUrl = `https://cdn.discordapp.com/banners/${guildData.id}/${guildData.banner}.png?size=4096`;
			}

			// Get splash if available (fallback to banner)
			if (guildData.splash) {
				splashUrl = `https://cdn.discordapp.com/splashes/${guildData.id}/${guildData.splash}.png?size=4096`;
			} else if (bannerUrl) {
				splashUrl = bannerUrl;
			}
		}

		// Fetch channel data
		if (DISCORD_CHANNEL_ID) {
			const channelResponse = await fetch(
				`https://discord.com/api/v10/channels/${DISCORD_CHANNEL_ID}`,
				{
					headers: {
						'Authorization': `Bot ${DISCORD_BOT_TOKEN}`,
						'User-Agent': 'DiscordBot (https://strands.gg, 1.0)'
					}
				}
			);

			if (channelResponse.ok) {
				const channelData = await channelResponse.json() as any;
				channelName = channelData.name || null;
			}
		}
	}
} catch (error) {
	console.error('Failed to fetch Discord guild/channel data:', error);
}
---

<!doctype html>
<html lang="en" style={badgeColorPrimary && badgeColorSecondary ? `--background: linear-gradient(135deg, ${badgeColorPrimary}, ${badgeColorSecondary})` : ''}>
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		
		<style>
			body {
				display: grid;
				grid-template-columns: auto 1fr;
				grid-template-rows: 1fr;
				border-radius: 20px;
				gap: 5px;

				@supports (corner-shape: squircle) {
					border-radius: 50px;
					corner-shape: squircle;
				}

				.invite-container {
					--_width: 620px;

					@apply bg-slate-800 rounded-lg;
					
					container-type: inline-size;
					width: clamp(300px, calc(100vw - (var(--base-padding) * 2)), var(--_width));
					max-width: var(--_width);
					text-align: center;
					overflow: hidden;
					display: flex;
					flex-direction: column;

					* {
						transition: 0.2s;
					}

					.alert {
						@apply bg-blue-500 text-slate-100 font-semibold rounded-md p-4 text-balance;

						&.alert-warning {
							@apply bg-yellow-500 text-slate-900;
						}

						@supports (corner-shape: squircle) {
							border-radius: 30px;
							corner-shape: squircle;
						}
					}

					.server-banner {
						width: 100%;
						aspect-ratio: 16 / 7;
						object-fit: cover;
						object-position: bottom center;
						display: block;
					}

					.invite-content {
						padding: 2rem;
						display: flex;
						flex-direction: column;
						flex: 1;
						position: relative;

						&.no-banner {
							.server-header {
								position: static;
								margin-bottom: 2rem;
							}
						}

						.server-header {
							position: absolute;
							top: -45px;
							inset-inline: 2rem;
							display: flex;
							align-items: center;
							gap: 1rem;

							.server-icon {
								@apply border-4 border-slate-800;

								width: 100px;
								height: 100px;
								position: relative;
								top: -5px;
								border-radius: 50%;
								background: #5865F2;
								display: flex;
								align-items: center;
								justify-content: center;
								font-size: 3rem;
								color: white;
								font-weight: bold;
								overflow: hidden;
								flex-shrink: 0;

								img {
									width: 100%;
									height: 100%;
									object-fit: cover;
								}
							}

							.server-info {
								flex: 1;
								width: 0;
								display: flex;
								flex-direction: column;
								gap: 0.25rem;
								text-align: left;

								.invite-heading {
									@apply text-lg font-bold text-slate-100 overflow-hidden whitespace-nowrap overflow-ellipsis;
								}

								.server-name-row {
									display: flex;
									align-items: center;
									gap: 0.5rem;

									.server-name {
										@apply text-2xl font-bold text-slate-100 overflow-hidden whitespace-nowrap overflow-ellipsis;
									}

									.server-tag {
										flex-shrink: 0;
										display: inline-flex;
										align-items: center;
										gap: 0.25rem;
										padding: 2px 0.5rem 2px 2px;
										border-radius: 6px;
										font-size: 0.75rem;
										font-weight: 600;
										max-width: 60px;
										text-transform: uppercase;
										color: var(--color-slate-100);
										background: linear-gradient(135deg, var(--tag-primary, #5865F2), var(--tag-secondary, #4752C4));

										img {
											@apply bg-slate-100;

											width: 16px;
											height: 16px;
											object-fit: contain;
											padding: 2px;
											border-radius: 4px;
										}

										@supports (corner-shape: squircle) {
											border-radius: 12px;
											corner-shape: squircle;

											img {
												border-radius: 8px;
												corner-shape: squircle;
											}
										}
									}
								}
							}
						}

						.content-wrapper {
							flex: 1;
							padding-top: calc(var(--base-padding));
							display: flex;
							flex-direction: column;
							gap: 1.5rem;

							.discord {
								@apply text-slate-300 font-semibold;

								display: flex;
								align-items: center;
								justify-content: center;
								gap: 1.2rem;
								font-size: 1.5rem;
								line-height: 1;

								.discord-logo {
									width: 200px;
									height: auto;
								}
							}

							.member-count {
								@apply bg-slate-700 text-slate-100 rounded-lg;

								display: flex;
								gap: 1.5rem;
								justify-content: center;
								padding: 1rem;

								@supports (corner-shape: squircle) {
									border-radius: 40px;
									corner-shape: squircle;
								}

								.member-stat {
									display: flex;
									align-items: center;
									gap: 0.5rem;
									font-size: 1.5rem;

									.status-dot {
										width: 8px;
										height: 8px;
										border-radius: 50%;

										&.status-online {
											@apply bg-green-500;
										}

										&.status-members {
											@apply bg-gray-400;
										}
									}
								}
							}

							.spacer {
								flex: 1;
							}

							.continue-button {
								@apply bg-indigo-600 text-slate-100 rounded-lg;

								width: 100%;
								padding: 1rem;
								color: white;
								border: none;
								border-radius: 8px;
								font-size: 1rem;
								font-weight: 500;
								cursor: pointer;
								transition: background 0.2s;

								@supports (corner-shape: squircle) {
									border-radius: 40px;
									corner-shape: squircle;
								}

								&:hover:not(:disabled) {
									background: #4752C4;
								}

								&:disabled {
									background: #4E5058;
									color: #72767D;
									cursor: not-allowed;
									opacity: 0.6;
								}
							}

							.loading-text {
								display: none;
								margin-top: 1rem;
								color: #80848E;
								font-size: 0.875rem;

								&.show {
									display: block;
								}
							}

							.countdown-timer {
								display: none;
								margin-top: 1rem;
								padding: 0.75rem;
								background: rgba(88, 101, 242, 0.1);
								border: 1px solid rgba(88, 101, 242, 0.3);
								color: #B9BBBE;
								border-radius: 8px;
								font-size: 0.875rem;
								text-align: center;

								strong {
									color: #5865F2;
									font-size: 1rem;
									font-family: monospace;
								}

								@supports (corner-shape: squircle) {
									border-radius: 16px;
									corner-shape: squircle;
								}
							}

							.expired-alert {
								display: none;
								margin-top: 1rem;
								padding: 0.75rem;
								background: rgba(250, 166, 26, 0.1);
								border: 1px solid rgba(250, 166, 26, 0.3);
								color: #FAA61A;
								border-radius: 8px;
								font-size: 0.875rem;
								text-align: center;

								a {
									color: #FAA61A;
									font-weight: 600;
									text-decoration: underline;
									cursor: pointer;

									&:hover {
										color: #FBB03B;
									}
								}

								@supports (corner-shape: squircle) {
									border-radius: 16px;
									corner-shape: squircle;
								}
							}

							.error-message {
								display: none;
								margin-top: 1rem;
								padding: 0.75rem;
								background: #ED4245;
								color: white;
								border-radius: 4px;
								font-size: 0.875rem;

								&.show {
									display: block;
								}
							}
						}

						@container (width < 600px) {
							padding: 1rem;

							.server-header {
								position: relative;
								top: unset;
								margin-top: -55px;
								width: unset;
								inset-inline: 0;
								flex-direction: column;
								text-align: center;
								margin-bottom: 1rem;
								gap: 0.5rem;

								.server-info {
									text-align: center;
									width: unset;
									gap: 0;
								}

								.server-icon {
									width: 80px;
									height: 80px;
									top: 0;
								}
							}
						}
					}
				}

				.background-image {
					@apply bg-slate-900 rounded-lg;

					background: #5865F2;
					background-image:
						radial-gradient(circle at 25% 25%, rgba(88, 101, 242, 0.8) 0%, transparent 50%),
						radial-gradient(circle at 75% 75%, rgba(114, 137, 218, 0.6) 0%, transparent 50%);
					overflow: hidden;

					&.has-splash {
						background-size: cover;
					}
				}

				&.unknown-community {
					@apply bg-slate-900 w-full h-full flex items-center justify-center;

					.invite-container {
						@apply bg-transparent w-full max-w-3xl;
					}

					.background-image {
						display: none;
					}
				}
			}
		</style>
	</head>

	<body class={unknownCommunity ? 'unknown-community' : ''}>
		<main class="invite-container">
			{bannerUrl && (
				<img src={bannerUrl} alt={`${serverName} banner`} class="server-banner" />
			)}

			{unknownCommunity ? (
				<div class="alert alert-warning">
					<strong>Warning:</strong> The Discord invite code assigned to this website is invalid or has expired.
				</div>
			) : (
				<div class={`invite-content ${!bannerUrl ? 'no-banner' : ''}`}>
					<div class="server-header">
						<div class="server-icon">
							{isIconUrl ? (
								<img src={serverIcon} alt={`${serverName} icon`} />
							) : (
								serverIcon
							)}
						</div>
						<div class="server-info">
							<div class="invite-heading">You've been invited to join #{channelName} in</div>
							<div class="server-name-row" style={badgeColorPrimary && badgeColorSecondary ? `--tag-primary: ${badgeColorPrimary}; --tag-secondary: ${badgeColorSecondary}` : ''}>
								{tagName && (
									<div class="server-tag">
										{badgeUrl && <img src={badgeUrl} alt="Badge" />}
										{tagEmoji && <span>{tagEmoji}</span>}
										<span>{tagName}</span>
									</div>
								)}
								<div class="server-name">{serverName}</div>
							</div>
						</div>
					</div>

					<div class="content-wrapper">
						<div class="discord">
							ON
							<img src="https://cdn.prod.website-files.com/6257adef93867e50d84d30e2/66e90ab9506850e8a5dd48e3_Discrod_MainLogo.svg" alt="Discord Logo" class="discord-logo" />
						</div>

						<div class="member-count">
							<div class="member-stat">
								<span class="status-dot status-online"></span>
								<span><strong>{onlineCount.toLocaleString()}</strong> Online</span>
							</div>
							<div class="member-stat">
								<span class="status-dot status-members"></span>
								<span><strong>{memberCount.toLocaleString()}</strong> Members</span>
							</div>
						</div>

						<div class="spacer"></div>

						<button class="continue-button" id="joinButton" disabled>
							Continue to Discord
						</button>

						<div class="countdown-timer" id="countdownTimer">
							Your invite expires in <strong id="countdownTime">--</strong>
						</div>

						<div class="expired-alert" id="expiredAlert">
							Your invite link expired. <a href="javascript:location.reload()">Reload to get a new one</a>
						</div>

						<div class="loading-text" id="loadingText">
							Opening Discord...
						</div>

						<div class="error-message" id="errorMessage">
							Could not open Discord app. Please try again.
						</div>
					</div>
				</div>
			)}
		</main>

		<div
			class={`background-image ${splashUrl ? 'has-splash' : ''}`}
			style={splashUrl ? `background-image: linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url(${splashUrl})` : ''}
		></div>

		<script is:inline>
			const joinButton = document.getElementById('joinButton');
			const loadingText = document.getElementById('loadingText');
			const countdownTimer = document.getElementById('countdownTimer');
			const countdownTime = document.getElementById('countdownTime');
			const expiredAlert = document.getElementById('expiredAlert');
			const localhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
			const STORAGE_KEY = 'discord_invite_data';
			let countdownInterval = null;
			let currentInvite = null; // Store the current invite data

			// Check if required elements exist (they won't if unknownCommunity is true)
			if (!joinButton || !loadingText || !countdownTimer || !countdownTime || !expiredAlert) {
				console.warn('Required DOM elements not found - likely showing error state');
			}

			// Format time remaining as MM:SS
			function formatTime(ms) {
				const totalSeconds = Math.floor(ms / 1000);
				const minutes = Math.floor(totalSeconds / 60);
				const seconds = totalSeconds % 60;
				return `${minutes}:${seconds.toString().padStart(2, '0')}`;
			}

			// Start countdown timer
			function startCountdown(expiresAt) {
				if (!countdownTimer || !countdownTime || !expiredAlert || !joinButton) return;

				// Clear any existing interval
				if (countdownInterval) {
					clearInterval(countdownInterval);
				}

				// Update immediately
				const updateCountdown = () => {
					const now = Date.now();
					const remaining = expiresAt - now;

					if (remaining <= 0) {
						// Hide countdown timer
						countdownTimer.style.display = 'none';

						// Show expired alert
						expiredAlert.style.display = 'block';

						// Disable and hide button
						joinButton.disabled = true;
						joinButton.style.display = 'none';

						// Clear interval
						if (countdownInterval) {
							clearInterval(countdownInterval);
							countdownInterval = null;
						}
						return;
					}

					countdownTime.textContent = formatTime(remaining);
					countdownTimer.style.display = 'block';
					expiredAlert.style.display = 'none';
				};

				updateCountdown();
				countdownInterval = setInterval(updateCountdown, 1000);
			}

			// Fetch invite code from API
			async function fetchInvite() {
				if (!joinButton) return null;

				console.log('fetchInvite() called');

				try {
					// Check localStorage for existing UUID
					let storedData = null;
					try {
						const stored = localStorage.getItem(STORAGE_KEY);
						if (stored) {
							storedData = JSON.parse(stored);
							console.log('Found stored UUID:', storedData.uuid);
						}
					} catch (e) {
						console.error('Error reading localStorage:', e);
					}

					// Build API URL with UUID if available (server will handle expiry checking)
					const apiUrl = storedData?.uuid
						? `/api/invite?uuid=${storedData.uuid}`
						: '/api/invite';

					console.log('Fetching invite from:', apiUrl);

					// Fetch invite code from API
					const response = await fetch(apiUrl);
					if (!response.ok) {
						throw new Error('Failed to fetch invite');
					}

					const data = await response.json();

					// Debug: Compare server time vs client time
					const clientTime = Date.now();
					const serverTime = data.serverTime || clientTime;
					const timeDiff = clientTime - serverTime;
					const timeUntilExpiry = data.expiresAt - clientTime;
					console.log(`Time sync check: Server=${new Date(serverTime).toISOString()}, Client=${new Date(clientTime).toISOString()}, Diff=${timeDiff}ms`);
					console.log(`Using ${data.cached ? 'cached' : 'new'} invite: ${data.code} (UUID: ${data.uuid}), expires: ${new Date(data.expiresAt).toISOString()}, ${Math.floor(timeUntilExpiry / 1000)}s remaining on client`);

					// Store the invite data in localStorage
					try {
						localStorage.setItem(STORAGE_KEY, JSON.stringify({
							uuid: data.uuid,
							code: data.code,
							expiresAt: data.expiresAt
						}));
					} catch (e) {
						console.error('Error writing to localStorage:', e);
					}

					// Store current invite
					currentInvite = data;

					// Start countdown timer
					startCountdown(data.expiresAt);

					// Enable the button
					joinButton.disabled = false;
					joinButton.textContent = 'Continue to Discord';

					return data;
				} catch (error) {
					console.error('Error fetching invite:', error);
					joinButton.disabled = false;
					joinButton.textContent = 'Use Fallback Invite';
					return null;
				}
			}

			// Open Discord with the current invite
			function openDiscord() {
				if (!loadingText || !currentInvite) {
					console.log('No invite or elements available, using fallback');
					window.location.href = 'https://discord.gg/strands';
					return;
				}

				const discordUrl = `discord://-/invite/${currentInvite.code}/login`;
				const webUrl = `https://discord.com/invite/${currentInvite.code}`;

				let blurred = false;

				// Detect if the app successfully opened
				const onBlur = () => {
					blurred = true;
					loadingText.classList.add('show');
				};

				window.addEventListener('blur', onBlur);

				// Try to open Discord app
				window.location.href = discordUrl;

				// Check if app opened after a delay
				setTimeout(() => {
					window.removeEventListener('blur', onBlur);

					// If the window never lost focus, the app didn't open
					if (!blurred) {
						window.location.href = webUrl;
					}
				}, 2000);
			}

			// Fetch invite on page load
			window.addEventListener('load', async () => {
				if (!joinButton) {
					console.log('Page showing error state, skipping invite fetch');
					return;
				}

				// Fetch the invite (this will enable the button when ready)
				await fetchInvite();

				// Auto-redirect on page load (if not localhost)
				if(!localhost) {
					openDiscord();
				}
			});

			// Manual button click - opens Discord app with fallback
			if (joinButton) {
				joinButton.addEventListener('click', openDiscord);
			}
		</script>
	</body>
</html>
